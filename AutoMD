#!/bin/bash
#########################################################################
# AutoMD, Version 0.1.6 (AutoMD)
# 2022, ShanghaiTech University, Wang Lin
# 2023, ShanghaiTech University, Hao Yang
# Email: wanglin3@shanghaitech.edu.cn
# URL: https://github.com/Wang-Lin-boop/AutoMD
#########################################################################

function checkparam(){
testlogic=false
for line in $2
do
if [ "$1"x == "$line"x ];then
  testlogic="true";break;fi
done
if [ "${testlogic}"x == "true"x ];then
  echo "Note: Parameter "$1" is vaild.";
else
  echo "Error: your parameter "$1" is unvaild, please check it." ;echo ""
  exit
fi
}

function set_msj(){
cat<<MSJ1 > AutoMD.msj
task {
  task = "desmond:auto"
  set_family = {
    simulate = {
    checkpt.write_last_step = no
    }
  }
}
MSJ1
}

function set_relax(){
    if [ ${relaxation_protocol} == "Solute" ];then
cat<<MD1 >> AutoMD.msj
simulate {
    title       = "Brownian Dynamics NVT, T = 10 K, small timesteps, and restraints on solute_heavy_atom, 100 ps"
    annealing   = off
    time        = 100
    timestep    = [0.001 0.001 0.003 ]
    temperature = 10.0
    ensemble = {
        class = "NVT"
        method = "Brownie"
        brownie = {
            delta_max = 0.1
        }
    }
    restrain = {
        atom = "solute_heavy_atom"
        force_constant = 50.0
    }
}
simulate {
    title       = "Brownian Dynamics NVT, T = 10 K, small timesteps, and restraints on user defined sets, ${mintime} ps"
    annealing   = off
    time        = ${mintime}
    timestep    = [0.001 0.001 0.003 ]
    temperature = 10.0
    ensemble = {
        class = "NVT"
        method = "Brownie"
        brownie = {
            delta_max = 0.1
        }
        thermostat = {
            tau = 1.0
        }
    }
    restrain = {
        atom = "solute_heavy_atom"
        force_constant = 50.0
    }
}
simulate {
    title       = "Langevin small steps NVT, T = 10 K, and restraints on solute heavy atoms, 12 ps"
    annealing   = off
    time        = 12
    timestep    = [0.001 0.001 0.003]
    temperature = 10.0
    restrain    = { atom = solute_heavy_atom force_constant = 50.0 }
    ensemble    = {
        class  = NVT
        method = Langevin
        thermostat.tau = 0.1
    }
    randomize_velocity.interval = 1.0
    eneseq.interval             = 0.3
    trajectory.center           = []
}
simulate {
    title       = "Langevin NPT, T = 10 K, and restraints on solute heavy atoms, 12 ps"
    annealing   = off
    time        = 12
    temperature = 10.0
    restrain    = retain
    ensemble    = {
        class  = NPT
        method = Langevin
        thermostat.tau = 0.1
        barostat  .tau = 50.0
    }
    randomize_velocity.interval = 1.0
    eneseq.interval             = 0.3
    trajectory.center           = []
}
simulate {
    title       = "Langevin NPT, T = 10 K, and restraints on solute heavy atoms, 12 ps"
    time        = 12
    restrain    = retain
    ensemble    = {
        class  = NPT
        method = Langevin
        thermostat.tau = 0.1
        barostat  .tau = 50.0
    }
    randomize_velocity.interval = 1.0
    eneseq.interval             = 0.3
    trajectory.center           = []
}
simulate {
    title       = "Langevin NPT and restraints on solute heavy atoms, 12ps"
    effect_if   = [["@*.*.annealing"] 'annealing = off temperature = "@*.*.temperature[0][0]"']
    time        = 12
    restrain    = retain
    ensemble    = {
        class  = NPT
        method = Langevin
        thermostat.tau = 0.1
        barostat.tau   = 50.0
    }
    randomize_velocity.interval = 1.0
    eneseq.interval             = 0.3
    trajectory.center           = []
}
simulate {
    title       = "Langevin NPT and no restraints, 24ps"
    effect_if   = [["@*.*.annealing"] 'annealing = off temperature = "@*.*.temperature[0][0]"']
    time        = 24
    ensemble    = {
        class  = NPT
        method = Langevin
        thermostat.tau = 0.1
        barostat  .tau = 2.0
    }
    eneseq.interval   = 0.3
    trajectory.center = solute
}
MD1
    elif [ ${relaxation_protocol} == "Membrane" ];then
cat<<MD1 >> AutoMD.msj
simulate {
    title = "Brownian Dynamics NVT, T = 10 K, small timesteps, and restraints on solute heavy atoms, 100ps"
    annealing = false
    backend = {
        mdsim = {
            plugin = { maeff_output = { nocenter = true } }
        }
    }
    ensemble = { brownie = { delta_max = 0.1 } class = NVT method = Brownie }
    restraints = {
        new = [ { atoms = solute  force_constants = 50.0  name = posre_harm } ]
    }
    temperature = 10.0
    time = ${mintime}
    timestep = [0.001 0.001 0.003 ]
}
simulate {
    title = "100 K, H2O Barrier, Browninan NPT, membrane restrained in z, protein restrained"
    backend = {
        force = {
        term = {
            GaussianForce = {  A = [10.0 10.0 ]  grp_energy = [1 1 ] mu = [-10.0 10.0 ] sigma = [0.5 0.5 ] type = GaussianForce }
            list = [GaussianForce ]
        }
        }
        mdsim = {
        plugin = {
            maeff_output = { nocenter = true }
        }
        }
    }
    ensemble = {
        barostat = { tau = 0.5 }
        brownie = { delta_max = 0.5}
        class = NPT
        method = Brownie
        thermostat = { tau = 0.5 }
    }
    pressure = 1000
    restraints = {
        new = [
        { atoms = "asl: (membrane ) AND NOT ((atom.ele H))" force_constants = [0.0 0.0 5.0 ] name = posre_harm }
        { atoms = solute_heavy_atom  force_constants = 20.0 name = posre_harm }
        ]
    }
    temperature = 100
    time = 20
    timestep = [0.002 0.002 0.004 ]
}
simulate {
    backend = {
        force = {
        term = {
            GaussianForce = {  A = [10.0 10.0 ] grp_energy = [1 1 ]  mu = [-10.0 10.0 ]  sigma = [0.5 0.5 ]  type = GaussianForce }
            list = [GaussianForce ]
        }
        }
        mdsim = {
        plugin = {
            maeff_output = {  nocenter = true  }
        }
        }
    }
    ensemble = {
        barostat = {
        tau = 2.0
        }
        class = NPgT
        method = MTK
        thermostat = {
        tau = 1.0
        }
    }
    pressure = 1000
    restraints = {
        new = [
        { atoms = "asl: (membrane and atom.ele P,N)"  force_constants = [0.0 0.0 2.0 ]  name = posre_harm }
        { atoms = solute_heavy_atom force_constants = 10.0 name = posre_harm }
        ]
    }
    temperature = 100
    time = 100
    timestep = [0.002 0.002 0.004 ]
    title = "100 K, H2O Barrier, NPgT, membrane restrained in z, protein restrained"
}
simulate {
    title = "NPgT, Heating from 100 -> 300 K, H2O Barrier and gradual release of restrain"
    annealing = true
    backend = {
        force = {
        term = {
            GaussianForce = { A = [2.0 ]  grp_energy = [1 ]  mu = [0.0 ]  sigma = [5 ]  type = GaussianForce }
            list = [GaussianForce ]
        }
        }
        integrator = {
        Multigrator = {
            barostat = {  temperature = ?  }
        }
        }
        mdsim = {
        plugin = {
            anneal = {   interval = 0.09  }
            list = ["!append!" posre_schedule ]
            maeff_output = {  nocenter = true }
            posre_schedule = {  schedule = {  time = [0 60 100 ]  value = [1.0 0.2 0.2 ] } type = posre_schedule }
        }
        }
    }
    ensemble = {  barostat = { tau = 2.0 }
        class = NPgT  method = MTK  thermostat = { tau = 0.1  }
    }
    pressure = 100
    restraints = {
        new = [
        { atoms = "asl: (membrane and atom.ele P,N)"  force_constants = [0.0 0.0 2.0 ] name = posre_harm }
        { atoms = solute_heavy_atom  force_constants = 10.0  name = posre_harm  }
        ]
    }
    temperature = [
        [100 0 ]
        [200 100 ]
        [300 150 ]
    ]
    time = 150
    timestep = [0.002 0.002 0.004 ]
}
simulate {
    title = "NVT production remove all restraints"
    ensemble = { 
        class = NVT
        method = NH
        thermostat = {
        tau = 1
        }
    }
    restraints = {
        new = [ { atoms = "asl: ((backbone or ligand) and not a.e H)"  force_constants = 5.0  name = posre_harm  } ]
    }
    temperature = 300
    time = 50
    }
    simulate {
    ensemble = {
        class = NVT
        method = NH
        thermostat = {
        tau = 1
        }
    }
    temperature = "${temperature}"
    time = 50
    title = "NVT production remove all restraints"
}
MD1
fi
}

function add_counterion(){
    neutralizeion=$1
cat<<EOF
  add_counterion = {
       ion = ${neutralizeion}
       number = neutralize_system
  }
EOF
};export -f add_counterion

function box(){
    # box type and size
    if [ "${boxshape}"x == "orthorhombic"x ];then
        export boxsize="[${boxxyz} ]"
    elif [ "${boxshape}"x == "triclinic"x ];then
        export boxsize="[${boxxyz} 60.0 60.0 60.0 ]"
    else
        export boxsize=${boxsize}
    fi
cat<<EOF
  box = {
     shape = ${boxshape}
     size = ${boxsize}
     size_type = buffer
  }
  override_forcefield = ${override_forcefield}
  rezero_system = ${rezerosys}
  minimize_volume = ${minisys}
EOF
};export -f box

function membrane_box(){
    export box_size_array=(${boxsize})
    export boxsize=${box_size_array[0]}
    cat<<EOF
  box = {
     shape = orthorhombic
     size = [${boxsize} ${boxsize} ${boxsize} ]
     size_type = buffer
  }
  membrane_box = {
     lipid = ${lipid_type}
     size = [${boxsize} ${boxsize} ${boxsize} ]
  }
  override_forcefield = ${override_forcefield}
  rezero_system = false
EOF
}

function add_salt(){
    saltconcentration=$1
    positive_ion=$2
    negative_ion=$3
cat<<EOF
  salt = {
     concentration = ${saltconcentration}
     negative_ion = ${negative_ion}
     positive_ion = ${positive_ion}
  }
EOF
};export -f add_salt

function set_sys_build_msj(){
    # parse system modes
    if [ ${System_Mode} == "INC" ];then
        export SYS_pipeline="SPC:K:0.15-K-Cl"
    elif [ ${System_Mode} == "OUC" ];then
        export SYS_pipeline="SPC:Na:0.15-Na-Cl"
    else
        export SYS_pipeline=${System_Mode}
    fi
    # genenate parts to system build for msj 
    SYS_array=(${SYS_pipeline//:/ })
    export solvent=${SYS_array[0]}
    export neutralizeion=${SYS_array[1]}
    export salt_buffer_info=${SYS_array[2]}
    [ ${first_input} == "no" ] || checkparam ${neutralizeion} "${all_ions_list[*]}"
    [ ${first_input} == "no" ] || checkparam ${solvent} "${solventlist[*]}"
    echo "build_geometry {" >> AutoMD.msj
    add_counterion ${neutralizeion} >> AutoMD.msj
    if [ ${relaxation_protocol} == "Membrane" ];then
        echo "NOTE: The membrane box must be orthorhombic, we will change your paramters to fit it boxtype!"
        membrane_box ${lipid_type} >> AutoMD.msj
    else
        box >> AutoMD.msj
    fi
    salt_buffer_list=(${salt_buffer_info//+/ })
    for salt_buffer in ${salt_buffer_list[@]} ;do
        salt_buffer_array=(${salt_buffer//-/ })
        export saltconcentration=${salt_buffer_array[0]}
        export positive_ion=${salt_buffer_array[1]}
        export negative_ion=${salt_buffer_array[2]}
        [ ${first_input} == "no" ] || checkparam ${positive_ion} "${positiveionlist[*]}"
        [ ${first_input} == "no" ] || checkparam ${negative_ion} "${nagativeionlist[*]}"
        add_salt ${saltconcentration} ${positive_ion} ${negative_ion} >> AutoMD.msj
    done
    echo "  solvent = ${solvent}" >> AutoMD.msj
    echo "}" >> AutoMD.msj
}

function genenate_analysis_scripts(){
    extend_to_time=`echo "${mdtime} * 2.0"|bc`
cat<<EXTEND > extend.sh
${Desmond}/desmond -JOBNAME "${i%%.*}-${seed}-md-extend" -HOST ${GPU_HOST} -restore ${i%%.*}-${seed}-md.cpt -in ${i%%.*}-${seed}-md-in.cms -cfg mdsim.last_time=${extend_to_time}
EXTEND
cat<<RESUME > resume.sh
${Desmond}/desmond -JOBNAME "${i%%.*}-${seed}-md-resume" -HOST ${GPU_HOST} -restore ${i%%.*}-${seed}-md.cpt -in ${i%%.*}-${seed}-md-in.cms
RESUME
cat<<CLUSTER > cluster.sh
${Desmond}/run trj_cluster.py ${i%%.*}-${seed}-md-out.cms ${i%%.*}-${seed}-md_trj ${i%%.*}-${seed}_cluster -rmsd-asl "$1" -fit-asl "\$2" -n "\$3" -HOST ${CPU_HOST} -JOBNAME ${i%%.*}-${seed}_cluster
CLUSTER
cat<<ANALY > occupancy.sh
${Desmond}/run trj_occupancy.py ${i%%.*}-${seed}-md-out.cms ${i%%.*}-${seed}-md_trj ${i%%.*}-${seed}_occupancy -fit-asl "\${2}" -map-asl "\${1}" -grid-length 50 -JOBNAME ${i%%.*}-${seed}_occupancy
ANALY
cat<<ANALY > ppi.sh
${Desmond}/run analyze_trajectory_ppi.py ${i%%.*}-${seed}-md-out.cms ${i%%.*}-${seed}_ppi "\${1}" "\${2}"
ANALY
}

function assign_opls(){
cat<<MSJ2 >> AutoMD.msj
assign_forcefield {
  forcefield = ${ffid}
  hydrogen_mass_repartition = ${hydrogen_mass_repartition}
  ${water}
  dir      = "."
  compress = ""
}
MSJ2
}

function assign_opls_for_ligand(){
cat<<MSJ1 > Parameterization.msj
task {
  task = "desmond:auto"
}
build_geometry {
  box = {
     shape = cubic
     size = 5.0
     size_type = buffer
  }
  override_forcefield = ${override_forcefield}
  neutralize_system = false
  solvate_system = false
  rezero_system = false
  minimize_volume = false
}
assign_forcefield {
  forcefield = ${override_forcefield}
}
MSJ1
    $SCHRODINGER/utilities/multisim -JOBNAME assign_ligand_ff -HOST "CPU:3" -maxjob 0 -m Parameterization.msj -o ligand_assign_ff.cms ${extrnal_ligand}
    mae2dms ligand_assign_ff.cms ligand.dms
    # $SCHRODINGER/run trj_extract_subsystem.py -whole -asl "${LigandASL}" ${input_to_viparr} ${input_to_viparr%%.*}_Ligand
    # mae2dms ${input_to_viparr%%.*}_Ligand-out.cms ligand.dms
}

function assign_viparr(){
    input_to_viparr=$1
    viparr_output=$2
    VMD_ASL=`echo ${LigandASL} | sed 's/chain.name/chain/g' | sed 's/res.ptype/resname/g' | sed 's/,/ /g' | sed 's/res.num/resid/g' | sed 's/AND/and/g' | sed 's/NOT/not/g' | sed 's/OR/or/g'`
    water_type=`echo ${solvent} | tr [A-Z] [a-z]`
    if [ ${water_type} == "spce" ] || [ ${water_type} == "tip3p" ] || [ ${water_type} == "tip4pew" ];then
        monovalent_ff="ions.amber1jc.${water_type}"
    else
        monovalent_ff="ions.amber1lm_iod.all"
    fi
    if [ ${ffid} == "Amber" ];then
        viparr ${input_to_viparr} ${viparr_output} -f aa.amber.19SBmisc -f aa.amber.ffncaa -f ${monovalent_ff} -f lipid.amber.lipid17 -f ions.amber2ff99.tip3p -f na.amber.bsc1 -f na.amber.tan2018 -f water.${water_type} --reorder-ids 
    elif [ ${ffid} == "DES-Amber" ];then
        viparr ${input_to_viparr} ${viparr_output} -f aa.DES-Amber_pe3.2 -f dna.DES-Amber_pe3.2 -f rna.DES-Amber_pe3.2 -f water.${water_type} -f aa.amber.phosaa10 -f aa.amber.ffncaa -f aa.amber.ffptm -f ${monovalent_ff} -f lipid.amber.lipid17 -f ions.amber2ff99.tip3p --reorder-ids 
    elif [ ${ffid} == "Charmm" ];then
        [ ${water_type} == "tip3p" ] && water_type="tip3p_charmm"
        viparr ${input_to_viparr} ${viparr_output} -f aa.charmm.c36m -f misc.charmm.all36 -f carb.charmm.c36 -f ethers.charmm.c35 -f ions.charmm36 -f lipid.charmm.c36 -f water.${water_type} -f na.charmm.c36 --reorder-ids 
    fi 
    # --rename-residues , some residue name maybe longer than 4 
    # --ligand-selection "${VMD_ASL}" --rename-atoms 
    # --ligand-files ligand.dms --match-ligand-bond-stereo --exhaustive-ligand-matching 
}

function set_md(){
# Generate CFG file
interval=`echo "scale=1;${mdtime} / ${frames}"|bc`
if [ ${ensemble_class} == "NPT" ];then
    pressure="[1.01325 isotropic ]"
    ensemble_method="MTK"
elif [ ${ensemble_class} == "NPgT" ];then
    pressure="1.01325"
    ensemble_method="MTK"
elif [ ${ensemble_class} == "NVT" ];then
    pressure="1.01325"
    ensemble_method="NH"
fi
cat<<MDCFG > ${ensemble_class}.cfg
annealing = false
backend = {
}
bigger_rclone = false
box = ?
checkpt = {
    first = 0.0
    interval = 240.06
    name = "\$JOBNAME.cpt"
    write_last_step = true
}
cpu = 1
cutoff_radius = 9.0
elapsed_time = 0.0
energy_group = false
eneseq = {
    first = 0.0
    interval = 1.2
    name = "\$JOBNAME\$[_replica\$REPLICA\$].ene"
}
ensemble = {
barostat = {
    tau = 2.0
}
class = ${ensemble_class}
method = MTK
thermostat = {
    tau = 1.0
}
}
glue = solute
maeff_output = {
    first = 0.0
    interval = 120.0
    name = "\$JOBNAME\$[_replica\$REPLICA\$]-out.cms"
    periodicfix = true
    trjdir = "\$JOBNAME\$[_replica\$REPLICA\$]_trj"
}
meta = false
meta_file = ?
pressure = ${pressure}
randomize_velocity = {
    first = 0.0
    interval = inf
    seed = ${seed}
    temperature = "@*.temperature"
}
$constraintDescription
simbox = {
    first = 0.0
    interval = 1.2
    name = "\$JOBNAME\$[_replica\$REPLICA\$]_simbox.dat"
}
surface_tension = 0.0
taper = false
temperature = [
    [${temperature}.0 0 ]
]
time = ${mdtime}
timestep = [0.002 0.002 0.006 ]
trajectory = {
    center = []
    first = 0.0
    format = dtr
    frames_per_file = 250
    interval = ${interval}
    name = "\$JOBNAME\$[_replica\$REPLICA\$]_trj"
    periodicfix = true
    write_velocity = false
}
MDCFG
# Generate MSJ file
cat<<MD1 >> AutoMD.msj
simulate {
    title    = "Final MD and analysis, ${mdtime} ps"
    cfg_file = "${ensemble_class}.cfg"
    jobname  = "\$MASTERJOBNAME"
    dir      = "."
    compress = ""
}
MD1
if [ "$Analysis"x == "true"x ];then
cat<<MSJAA >> AutoMD.msj
pl_analysis {
    ligand_asl = "$LigandASL"
    protein_asl = "$ProteinASL"
}
MSJAA
fi
}

#Default
    # MD system build
    export SYS_BUILD="yes"
    export System_Mode="INC"
    export negaion='Cl'
    export solvent="SPC"
    export rezerosys=true
    export minisys=true
    export boxshape=cubic
    export boxsize=15.0
    export position=Na
    export ffid="OPLS_2005"
    export NeorPo=false
    export saltconcentration=0.15
    export hydrogen_mass_repartition=false
    
    # MD params
    export relaxation_protocol="Solute"
    export ensemble_class="NPT"
    export mintime=100
    export mdtime=100000.0
    export num=1
    export temperature=310
    export frames=1000
    export Analysis=false
    export trunoff_md=false
    export ProteinASL="protein"
    export LigandASL="res.ptype UNK"
    export constraint=false
    export constraintASL="chain.name A AND backbone"
    export constraintForce=10

    # File and Host
    export input=*.mae
    export CPU_HOST=CPU
    export GPU_HOST=GPU

    # Desmond
    export Desmond=${Desmond}
    export viparr=${viparr}
    export VIPARR_FFPATH=${VIPARR_FFPATH}

function forcefield_info(){
cat<<HELP
The current force fields support in AutoMD:
    S-OPLS: 
        The force fields in Schrödinger packages, recommended to ligand-protein complex.
    OPLS_2005: 
        The default force field of Desmond package.
    Amber: 
        Recommended to protein, DNA, RNA, lipid and other systems.
        Amber-ff19SB for protein, Amber-ffncaa for non-canonical aa, Amber-ffptm for 
        post-translational modifications, amber1jc ion parameters adapt with spce, 
        tip3p or tip4pew, Amber-bsc1 for DNA, Amber-tan2018 for RNA.
    Charmm:
        Recommended to protein, DNA, RNA, lipid, carbohydrate and other systems.
        Charmm36m for protein, Charmm36 for carbohydrate, ions, lipid and nucleic acid.
    DES-Amber:
        Recommended to protein-protein complex.
        DES-Amber for protein-protein complex.
HELP
}

function help(){
cat<<HELP
Easy to get started with molecular dynamics simulation. Refer to: https://github.com/Wang-Lin-boop/AutoMD
Usage: AutoMD [OPTION] <parameter> 

Example: 
1) MD for cytoplasmic protein-ligand complex:
AutoMD -i "*.mae" -S INC -P "chain.name A" -L "res.ptype UNK" -F "S-OPLS"
2) MD for plasma protein-protein complex:
AutoMD -i "*.mae" -S OUC -F "DES-Amber"
3) MD for DNA/RNA-protein complex:
AutoMD -i "*.mae" -S "SPC:Cl:0.15-K-Cl+0.02-Mg2-Cl" -F Amber
4) MD for membrane protein, need to prior place membrane in Meastro.
AutoMD -i "*.mae" -S OUC -l "POPC" -r "Membrane" -F "Charmm"

Input parameter:
  -i	Use a file name (Multiple files are wrapped in "", and split by ' ') *.mae or *.cms ;
            or regular expression to represent your input file, default is *.mae.

System Builder parameter:
  -S    System Build Mode: <${System_Mode}>
        INC: System in cell, salt buffer is 0.15M KCl, water is SPC. Add K to neutralize system.
        OUC: System out of cell, salt buffer is 0.15M NaCl, water is SPC. Add Na to neutralize system.
        Custom Instruct: Such as: "TIP4P:Cl:0.15-Na-Cl+0.02-Fe2-Cl+0.02-Mg2-Cl"
            Interactive addition of salt. Add Cl to neutralize system.
                for positive_ion: Na, Li, K, Rb, Cs, Fe2, Fe3, Mg2, Ca2, Zn2 are predefined.
                for nagative_ion: F, Cl, Br, I are predefined.
                for water: SPC, TIP3P, TIP4P, TIP5P, DMSO, METHANOL are predefined.
  -l    Lipid type for membrane box. Use this option will build membrane box. <None>
            Lipid types: POPC, POPE, DPPC, DMPC. 
  -b	Define a boxshape for your systems. <${boxshape}>
            box types: dodecahedron_hexagon, cubic, orthorhombic, triclinic
  -s	Define a boxsize for your systems.  <${boxsize}>
            for dodecahedron_hexagon and cubic, defulat is 15.0;
            for orthorhombic or triclinic box, defulat is [15.0 15.0 15.0];
            If you want use Orthorhombic or Triclinic box, your parameter should be like "15.0 15.0 15.0"
  -R    Redistribute the mass of heavy atoms to bonded hydrogen atoms to slow-down high frequency motions.
  -F	Define a force field to build your systems. <${ffid}> 
            OPLS_2005, S-OPLS, OPLS4, OPLS5 are recommended to receptor-ligand systems.
            Amber, Charmm, DES-Amber are recommended to other systems. Use -O to show more details.
            Use the "Custom" to load parameters from input .cms file.

Simulation control parameter:
  -m	Enter the maximum simulation time for the Brownian motion simulation, in ps. <${mintime}>
  -r    The relaxation protocol before MD, "Membrane" or "Solute". <${relaxation_protocol}> 
  -e    The ensemble class in MD stage, "NPT", "NVT", "NPgT". <${ensemble_class}> 
  -t    Enter the Molecular dynamics simulation time for the product simulation, in ns. <100>
  -T    Specify the temperature to be used, in kelvin. <${temperature}>
  -N    Number of Repeat simulation with different random numbers. <${num}>
  -P    Define a ASL to receptor, such as "protein".
  -L    Define a ASL to ligand and run interaction analysis, such as "res.ptype UNK".
  -u    Turn off md simulation, only system build.
  -C    Set constraint to an ASL, such as "chain.name A AND backbone"
  -f    Set constraint force, default is 10.
  -o    Specify the approximate number of frames in the trajectory.  <1000>
        This value is coupled with the recording interval for the trajectory and the simulation time: 
        the number of frames times the trajectory recording interval is the total simulation time.
        If you adjust the number of frames, the recording interval will be modified.

Job control:
  -G	HOST of GPU queue, default is ${GPU_HOST}.
  -H    HOST of CPU queue, default is ${CPU_HOST}.
  -D	Your Desmond path. <${Desmond}>
  -V    Your viparr path. <${viparr}>
  -v    Your viparr force fields path. <${VIPARR_FFPATH}>

Thank you for your using, If you found any question, Please contact wanglin3@shanghaitech.edu.cn.
HELP
}

while getopts ":hi:S:nb:s:RF:m:t:T:N:P:L:C:f:o:H:G:D:uV:v:Ol:r:e:" opt
do
  case $opt in
    h)
        help
        exit;;
    O)
        forcefield_info
        exit;;
    i)
        export input=$OPTARG;;
    S)
        export System_Mode=$OPTARG;;
    l)
        export lipid_type=$OPTARG
        export relaxation_protocol="Membrane";;
    r)
        export relaxation_protocol=$OPTARG;;
    e)
        export ensemble_class=$OPTARG;;
    s)
        export boxsize=$OPTARG
        export boxxyz=${boxsize}
        ;;
    b)
        export boxshape=$OPTARG;;
    m)
        export mintime=$OPTARG;;
    R)
        export hydrogen_mass_repartition=true;;
    H)
        export CPU_HOST=$OPTARG;;
    G)
        export GPU_HOST=$OPTARG;;
    D)
        export Desmond=$OPTARG;;
    c)
        export saltconcentration=$OPTARG;;
    f)
        export constraint=true
        export constraintForce=$OPTARG
        ;;
    C)
        export constraint=true
        export constraintASL=$OPTARG
        ;;
    t)
        export mdtime=`echo "${OPTARG} * 1000.0"|bc`;;
    N)
        export num=$OPTARG;;
    P)
        export ProteinASL=$OPTARG
        ;;
    L)
        export LigandASL=$OPTARG
        export Analysis=true
        ;;
    T)
        export temperature=$OPTARG;;
    o)
        export frames=$OPTARG;;
    F)
        export ffid=$OPTARG;;
    u)
        export trunoff_md=true;;
    V)
        export viparr=$OPTARG;;
    v)
        export VIPARR_FFPATH=$OPTARG;;
    ?)
      echo ""
      echo "Error: Do not use undefined options. Try -h."
      echo ""
      exit;;
  esac
done

# Check Desmond and hostfile
if [ -d ${Desmond}/ ];then
  if [ "${Desmond}" == "" ];then
    echo "The environment variable \${Desmond} not found. Please check the Desmond path in your ~/.bashrc."
    exit
  fi
  if [ "`grep -c $CPU_HOST ${Desmond}/schrodinger.hosts`" == "0" ];then
    echo $CPU_HOST "Hostfile not found."
    exit
  fi
  if [ "`grep -c $GPU_HOST ${Desmond}/schrodinger.hosts`" == "0" ];then
    echo $GPU_HOST "Hostfile not found."
    exit
  fi
else
  echo "Desmond not found. Please check your Desmond Path."
  exit
fi

# MD basic control
seedlist=()
if [ ${num} -gt 3 ];then
    read -p "Do you really want to run more than three random simulations? Make sure you have adequate resources. Press Enter to continue and enter NO to exit!" makesure
    if [ "$makesure" == "NO" ];then
        echo "This is really a wise choice!"
        exit
    else
        echo "Your system will perform ${num} simulations at different random speeds."
        for i in $(seq 1 ${num});do
        seedlist+=("$RANDOM");done
    fi
elif [ "${num}" == "1" ];then
        seedlist=("$RANDOM") # 2007
        echo "Your system will only perform 1 simulation."
else
    echo "Your system will perform ${num} simulations at different random speeds."
    for i in $(seq 1 ${num});do
    seedlist+=("$RANDOM");done
fi

################################
## Check and Parse Params
################################
export fflist=("OPLS_2005" "OPLS3e" "OPLS4" "OPLS3" "OPLS2" "Amber" "Charmm" "DES-Amber" "S-OPLS" "Custom" "amber_misc")
export nagativeionlist=("F" "Cl" "Br" "I")
export positiveionlist=("Na" "K" "Li" "Rb" "Cs" "Mg2" "Ca2" "Zn2" "Fe2" "Fe3")
export all_ions_list=("F" "Cl" "Br" "I" "Na" "K" "Li" "Rb" "Cs" "Mg2" "Ca2" "Zn2" "Fe2" "Fe3")
export solventlist=("SPC" "SPCE" "TIP3P" "TIP4P" "TIP5P" "DMSO" "METHANOL" "OCTANOL" "TIP4PEW")
export boxlist=("orthorhombic" "triclinic" "dodecahedron_hexagon" "cubic")
export waterlist=("SPC" "TIP3P" "TIP4P" "TIP5P" "none" "TIP3P_CHARMM" "TIP4PD" "TIP4P2005" "SPCE")
export relaxation_protocol_list=("Membrane" "Solute")
export ensemble_class_list=("NPT" "NVT" "NPgT")
export first_input="yes"
[ ${first_input} == "no" ] || checkparam $ffid "${fflist[*]}"
[ ${first_input} == "no" ] || checkparam $boxshape "${boxlist[*]}"
[ ${first_input} == "no" ] || checkparam $relaxation_protocol "${relaxation_protocol_list[*]}"
[ ${first_input} == "no" ] || checkparam $ensemble_class "${ensemble_class_list[*]}"
if [ "$constraint"x == "true"x ];then
    export constraintDescription="restrain = {atom = \"asl:${constraintASL}\" force_constant = ${constraintForce}}"
else
    export constraintDescription="restrain = none"
fi
for line in ${waterlist[@]}; do
if [ "$solvent" == "$line" ];then
  export water="water = ${solvent}"
  break
fi; done

################################
## Assign Force Field
################################
if [ ${ffid:0:4} == "OPLS" ] || [ ${ffid} == "S-OPLS" ]; then
    export override_forcefield=${ffid}
    VIPPAR_ASSIGN="no"
elif [ ${ffid} == "Custom" ]; then
    VIPPAR_ASSIGN="custom"
else
    export override_forcefield="S-OPLS"
    VIPPAR_ASSIGN="yes"
    export PATH=${viparr}:$PATH
    source ${viparr}/activate
fi

################################
## Report MD Information
################################
cat<<OUT

Jobs will run at ${GPU_HOST};

Your MD information is as follows:

MIN time: ${mintime} ps
MD time: ${mdtime} ps
temperature: ${temperature} K
Repeat: ${num}
Random numbers list: ${seedlist[@]}

OUT

################################
## Check input file
################################
if ls $input >/dev/null 2>&1;then
  echo "These mae/cms files will be processed:"
  for i in `ls $input`; do echo $i;done
else
  echo "Error: mae/cms file not found, please check it."
  exit
fi
echo ""

for i in `ls $input`; do
    ################################
    ## Check input file and assign system build
    ################################
    if [ ${i##*.} == "cms" ]; then
        SYS_BUILD="no"
    elif [ ${i##*.} == "mae" ];then
        SYS_BUILD="yes"
        if [ ${ffid} == "Custom" ];then
            echo "ERROR: Custom force field cannot load from .mae file!"
            exit
        fi
    else
        echo "ERROR: ${i##*.} is unvaild."
        exit
    fi
    ################################
    ## System Build and Assign Force Fields
    ################################
    input_file_path=`readlink -f $i`
    if [ ${VIPPAR_ASSIGN} == "yes" ];then 
        if [ ${SYS_BUILD} == "yes" ];then
            mkdir -p ${i%%.mae}-SYS_BUILD
            cd ${i%%.mae}-SYS_BUILD
            set_msj
            set_sys_build_msj
            ${Desmond}/utilities/multisim -JOBNAME ${i%%.mae}-SYS_BUILD -HOST "${CPU_HOST}:3" -maxjob 0 -m AutoMD.msj -WAIT -lic DESMOND_ACADEMIC:16 -o ../${i%%.*}.cms ${input_file_path}
            cd ..
            system_file=`readlink -f ${i%%.*}.cms`
        elif [ ${SYS_BUILD} == "no" ];then
            system_file=${input_file_path}
        fi
        assign_viparr ${system_file} "${i%%.*}_viparr.cms"
        if [ ! -f "${i%%.*}_viparr.cms" ];then
            echo "ERROR: Viparr Failed!"
            exit
        fi
        ${Desmond}/run gen_fsys.py "${i%%.*}_viparr.cms"
        system_file=`readlink -f ${i%%.*}_viparr.cms`
    elif [ ${VIPPAR_ASSIGN} == "custom" ];then
        ${Desmond}/run gen_fsys.py ${system_file}
    else
        system_file=${input_file_path}
    fi
    ################################
    ## Submit MD Simulations
    ################################
    ## Parse Seeds and mkdir
    for seed in ${seedlist[@]};do
        if [ -d ${i%%.*}-${seed}-md ];then
            rm -r ${i%%.*}-${seed}-md
            echo "Remove all old files in ${i%%.*}-${seed}-md."
            mkdir -p ${i%%.*}-${seed}-md
        else
            mkdir -p ${i%%.*}-${seed}-md
        fi
        cd ${i%%.*}-${seed}-md
        set_msj # Make a .msj file
        if [ ${VIPPAR_ASSIGN} == "no" ];then
            if [ ${SYS_BUILD} == "yes" ];then
                set_sys_build_msj # Build systems
                assign_opls # assign force field
            elif [ ${SYS_BUILD} == "no" ];then
                assign_opls 
            fi
        fi
        if [ ${trunoff_md} == true ]; then
            echo "Note: You turn off the MD simulation stage!"
            set_md # Parse Seeds, ensemble class, temperature and md time
            if [ ${GPU_HOST} == "localhost" ];then
                ${Desmond}/utilities/multisim -JOBNAME ${i%%.*}-${seed}-md -HOST "localhost:3" -SUBHOST "localhost" -maxjob 0 -m AutoMD.msj -WAIT -lic DESMOND_ACADEMIC:16 -o ../${i%%.*}-${seed}-system.cms ${system_file}
                echo "MD system ${i%%.*} with seed ${seed} finished."
            else
                ${Desmond}/utilities/multisim -JOBNAME ${i%%.*}-${seed}-md -HOST "${CPU_HOST}:3" -SUBHOST ${GPU_HOST} -maxjob 0 -m AutoMD.msj -lic DESMOND_ACADEMIC:16 -o ../${i%%.*}-${seed}-system.cms ${system_file}
                echo "MD system ${i%%.*} with seed ${seed} had been submitted to ${GPU_HOST}."
            fi
        else
            set_relax # Parse relaxation protocol
            set_md # Parse Seeds, ensemble class, temperature and md time
            if [ ${GPU_HOST} == "localhost" ];then
                ${Desmond}/utilities/multisim -JOBNAME ${i%%.*}-${seed}-md -HOST "localhost:3" -SUBHOST "localhost" -maxjob 0 -m AutoMD.msj -c ${ensemble_class}.cfg -WAIT -lic DESMOND_ACADEMIC:16 -o ../${i%%.*}-${seed}-md-out.cms ${system_file}
                echo "MD system ${i%%.*} with seed ${seed} finished."
            else
                ${Desmond}/utilities/multisim -JOBNAME ${i%%.*}-${seed}-md -HOST "${CPU_HOST}:3" -SUBHOST ${GPU_HOST} -maxjob 0 -m AutoMD.msj -c ${ensemble_class}.cfg -lic DESMOND_ACADEMIC:16 -o ../${i%%.*}-${seed}-md-out.cms ${system_file}
                echo "MD system ${i%%.*} with seed ${seed} had been submitted to ${GPU_HOST}."
            fi
            genenate_analysis_scripts
        fi
        cd ..
        date
    done
done

cat<<FF

NOTE: You can view the *-md.eaf in the job directorys to analysis the trajectories.
NOTE: When the jobs finished, you can run the bash scripts in the job directorys to ....
    Resume previous MD: bash resume.sh 
    Extend MD: bash extend.sh # The total time will be extend to 2-fold of initial time.
    Cluster trajectory: bash cluster.sh  "<rmsd selection>"  "<fit selection>"  "<number>"
    Analysis Occupancy: bash occupancy.sh  "<selection to analysis>"  "<fit selection>"
    Analysis ppi contact: bash ppi.sh  "<Component A>"  "<Component B>" 

Thank you for your using, If you found any question, Please contact wanglin3@shanghaitech.edu.cn.

FF

